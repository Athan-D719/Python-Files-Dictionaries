+WRITTING INTO A CSV FILE

if the string is not as simple as separating the events with comas : "one","two","t,hree"
We would want to extract the rows as the numbers and we will just use as the separation method
the double quotes:
	outfile.write('"Name","Age","Sports"')
	...
	for olympian in olympians:
		row_string = '"{}","{}","{}"'.format(olympians[0], olympians[1], olympians[2])
	...
###############################################################################################
+JOINING METHODS..
The join() method will require a two parameters to join, instead we an use a list, but in this case
it will have to be a list of strings:

olympians = [("Jhon Aalberg, 31, "Cross Country Skiing"
		...)]
...
for
...
row_string = ','.join([olympian[0], str(olympian[1], olympian[2])])
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
OR IF ALL THE CHARACTERS ARE STRINGS: "31":
row_string = ','.join(olympian)
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
OR the ugly way:
row_line = olympian[0] + ',' olympian[1] + ',' olympian[2]
#############################################################################################
...
outfile.write(row_string)
outfile.write('\n') As the spacing
#################################################################################################
EXAMPLE:
with open('SP500.txt','r') as s:
    one =[]
    two=[]
    mean_SP = 0
    max_interest = 0
    lines = s.readlines()
    header = lines[0]
    print(header)
    print('-----------')
    for i in lines[1:18]:
        vals = i.strip().split(',')
        one.append(float(vals[1]))
        two.append(float(vals[-5]))
    mean_SP = (sum(one))/len(one)
    max_interest = max(two)
##########################################################################################################
#########################################################################################################
SORTED:
+Method sorted() uses two parameters (to_be_sorted, key=(sorting_function), reverse=(True,False))
:for x in sorted(d.keys(), key=lambda k:d[k]) #this way it will sort depending on the ordered numbers.

##########################################################################################################

groceries = {'apples': 5, 'pasta': 3, 'carrots': 12, 'orange juice': 2, 'bananas': 8, 'popcorn': 1, 'salsa': 3, 'cereal': 4, 'coffee': 5, 'granola bars': 15, 'onions': 7, 'rice': 1, 'peanut butter': 2, 'spinach': 9}

def a(x,y):
    return(y[x])
most_needed = sorted(groceries, key= lambda s: a(s,groceries), reverse=True)


##########################################################################################################












def last_four(x):
    a = []
    for i in x:
        a.append((str(i)[4:]))
    print(a)
    return(a)


ids = [17573005, 17572342, 17579000, 17570002, 17572345, 17579329]

sorted_ids = sorted(last_four(ids)) #last_four(ids)
print(sorted_ids)


